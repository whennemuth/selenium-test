<html>
<body leftmargin=50 topmargin=50 rightmargin=50>

	<head>
	 	<link rel="stylesheet" type="text/css" href="style.css" />
		<script src = "http://ajax.googleapis.com/ajax/libs/angularjs/1.5.5/angular.min.js"></script>
		<script src = "http://ajax.googleapis.com/ajax/libs/angularjs/1.5.5/angular-route.min.js"></script>
		<script src = "http://ajax.googleapis.com/ajax/libs/angularjs/1.5.5/angular-sanitize.min.js"></script>
		<script src = "js/configService.js"></script>
		<script src = "js/navigationService.js"></script>
		<script src = "js/cycleService.js"></script>
	</head>
	
	<div ng-app="kitApp" ng-controller="kitAppController">
		
		<div class=navstrip>
			<div class="{{getTabs().configClass}}">
				<a href="#/config">config</a>
			</div>
			<div class="{{getTabs().homeClass}}">
				<a href="#/home">home</a>
			</div>
			<div class="{{getTabs().helpClass}}">
				<a href="#/help">help</a>
			</div>
			<div class=navigation>
				<a href="#" onclick="document.location.href = 'main.htm';">refresh</a>
			</div>
		</div>
		
		<div ng-view></div>
	
		<!-- 
		<script type="text/ng-template" id="default.htm">
			default.htm
		</script>
		
		<script type="text/ng-template" id="help.htm">
			help.htm
		</script>
		-->
	</div>
	
	<script>
		// 1) Create the application module
		//    (NOTE: 'ngRoute' is another module loaded in with the angular-route.min.js script file.)
		var app = angular.module('kitApp', ['ngRoute']);

		// 2) Configure the application module by defining how its routeProvider service will operate.
		//    (NOTE: Like other core Angular identifiers, built-in services always start with $ (e.g. $http)).
		app.config(['$routeProvider', function routeProvider($routeProvider) {
			$routeProvider
				.when('/home', {
					templateUrl: 'default.htm',
					controller: 'kitAppController'
				})
				.when('/help', {
					templateUrl: 'help.htm',
					controller: 'kitAppController'
				})
				.when('/suite', {
					templateUrl: 'suite.htm',
					controller: 'kitAppController'
				})
				.when('/config', {
					templateUrl: 'config.htm',
					controller: 'kitAppController'
				})
				.otherwise({
					redirectTo: '/home'
				});
		}]);

		// 3) Set the controller for the application module and load its default model and event handlers
		app.controller('kitAppController', function($scope, $routeParams, $location, configSvc, navSvc, cycleSvc) {
			
			navSvc.setTabs($location.path());
			$scope.servername = '';
			$scope.serverurl = '';
			$scope.action = '';
			$scope.cycles = [];
			$scope.cycleTemplate = '';
			
			// Load in the existing configuration
			configSvc.getConfig(false).then(
					function(data) {
						$scope.config = data;
					},
					function(error) {
						alert(error);
					}
				);
			
			// Define an event handler to load in an empty default cycle object bound to a ng-repeat block for new cycles
			$scope.newCycle = function() {
				cycleSvc.getCycle(null).then(
					function(data) {
						$scope.cycles[0] = data;
					},
					function(error) {
						alert(error);
					}
				);
							}
			
			// Define an event handler to cancel the addition of a new cycle.
			$scope.cancelNewCycle = function() {
				$scope.cycles = [];
			};
			
			$scope.newSuite = function() {
				var suiteCount = $scope.cycles[0].suites.length;
				var cycleTemplate = cycleSvc.getEmptyCycle();
				$scope.cycles[0].suites[suiteCount] = cycleTemplate.suites[0];
			};
			
			// Define an event handler for the save button associated with updates to the configuration
			$scope.setConfig = function(action) {
				$scope.action = action;
				configSvc.saveConfig($scope).then(
					function(data) {
						$scope.config = data.config.data;
						if(data.config.data.currentEnvironment != undefined) {
							// Make the 2 text boxes reflect the selection in the listbox
							$scope.servername = data.config.data.currentEnvironment.name;
							$scope.serverurl = data.config.data.currentEnvironment.url;
						}
					},
					function(error) {
						alert(error);
					}
				);
			};
			
			// Define an event handler for the save button associated with updates to the output directory
			$scope.setOutputDir = function() {
				configSvc.setOutputDirectory().then(
					function(data) {
						$scope.config = data;
						alert('Directory setting saved!')
					},
					function(error) {
						alert(error);
					}
				);
			};
			
			$scope.getTabs = function() {
				return navSvc.getTabs();
			}
		});
		
		// 4) Setup injection for the various services.
		app.factory("configSvc", configFactory);
		app.factory("navSvc", navigationFactory);
		app.factory("cycleSvc", cycleFactory);
		
	</script>
</body>

</html>